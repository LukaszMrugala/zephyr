name: 'Run FAT testcases'
on:
  schedule:
    - cron: '55 5 * * *' # once daily @ 05:55 UTC, to avoid conflicts.
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  run_fat_testcases:
    defaults:
      run:
        shell: bash
    runs-on: fmos-guest-ubuntu-24c
    container:
      image: amr-registry.caas.intel.com/zephyrproject/fat-zephyr:v0.26.13
      env:
        ARTIFACTORY_API_KEY: ${{ secrets.ARTIFACTORY_API_KEY }}
        TOKEN: ${{ secrets.ZEPHYR_TOKEN }}
        ZEPHYR_SDK_INSTALL_DIR: /opt/toolchains/zephyr-sdk-0.16.8
        ZEPHYR_TOOLCHAIN_VARIANT: xt-clang
        XTENSA_TOOLCHAIN_PATH: /opt/toolchains/xtensa/XtDevTools/install/tools
        XTENSA_CORE: ace10_LX7HiFi4_2022_10
        TOOLCHAIN_VER: RI-2022.10-linux
        XTENSA_BUILDS_DIR: /opt/toolchains/xtensa/XtDevTools/install/builds
        XTENSAD_LICENSE_FILE: 84300@xtensa01p.elic.intel.com
        XTENSA_SYSTEM: /opt/toolchains/xtensa/XtDevTools/install/tools/RI-2022.10-linux/XtensaTools/config/
    steps:
      - name: Clean
        shell: bash
        run: |
          # set dotglob so rm will remove dot files and dirs - (.west, etc.)
          shopt -s dotglob
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          # just to be sure...
          sudo rm -rf *
          echo "Post Clean Below"
          ls -la ./

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main  # upstream branch
          fetch-depth: 0

      - name: Checkout main-intel
        uses: actions/checkout@v4
        with:
          ref: main-intel
          fetch-depth: 0
          path: main-intel

      - name: Environment Setup
        shell: bash
        run: |
          git config --global user.email "sys_tmbuild@intel.com"
          git config --global user.name "Github Builder CI"
          git config --global credential.helper 'store --file=$HOME/.git-credentials'
          echo -e "https://$TOKEN:$TOKEN@github.com/intel-innersource/frameworks.validation.firmware-automated-testing.fat" > $HOME/.git-credentials

          cp main-intel/submanifests/intel.yaml submanifests/intel.yaml
          mkdir -p .github/data && cp main-intel/.github/data/fat_test_list.json .github/data/fat_test_list.json

          if [ ! -f "/__w/os.rtos.zephyr.zephyr/.west/config" ]; then
            west init -l . || true
          fi

          west config manifest.project-filter -- +sof
          west config manifest.group-filter -- +fat
          west config --global update.narrow true
          west config --global update.path-cache "/runner/workspace"

          west update  2>&1 1> west.update.log || ( rm -rf ../intel ../modules ../bootloader ../tools && west update )

          for r in `west  list -f {url} | grep intel-innersource | sed 's#https://##'`; do
            echo -e "https://$TOKEN:$TOKEN@$r" >> $HOME/.git-credentials
          done

          west update fat
          west update fat_submodules

          git config --global --add safe.directory ${PWD}

          west update --path-cache /runner/workspace
          west forall -c 'git reset --hard HEAD'

      - name: Download sim
        shell: bash
        run: |
          wget -q --show-progress --progress=bar:force:noscroll --no-check-certificate --header="X-JFrog-Art-Api:$ARTIFACTORY_API_KEY" https://ubit-artifactory-or.intel.com/artifactory/zephyr-generic-or-local/tools/fat/test_mtl_ww0524.tar.gz
          mkdir -p ${GITHUB_WORKSPACE}/../intel/std_sim/
          tar -xzf test_mtl_ww0524.tar.gz --strip-components=1 -C ${GITHUB_WORKSPACE}/../intel/std_sim/
          rm test_mtl_ww0524.tar.gz

      - name: Build RIMAGE
        run: |
          pushd ../modules/audio/sof/tools/rimage
          cmake -B build/
          make  -C build/
          sudo cp build/rimage /usr/local/bin/
          popd

      - name: Build SOF Image
        run: |
          export ZEPHYR_BASE=${GITHUB_WORKSPACE}
          cd ${GITHUB_WORKSPACE}/..
          west build --build-dir build-mtl -p always -b intel_adsp_ace15_mtpm ./modules/audio/sof/app
          cp ${GITHUB_WORKSPACE}/../build-mtl/zephyr/zephyr.ri ${GITHUB_WORKSPACE}/../intel/std_sim

      - name: Run FAT testcases
        env:
          TIMEOUT_PYTEST: '3m'
        shell: bash
        run: |
          cd ${GITHUB_WORKSPACE}/../intel/frameworks.validation.firmware-automated-testing.fat
          git submodule update --init --recursive --force

          # Extract platform.py from README
          sed -n '208,301p' board_defs/README.md > board_defs/platform.py

          # Read test list from JSON file
          readarray -t mtl_test_list < <(jq -r '.tests[]' ${GITHUB_WORKSPACE}/.github/data/fat_test_list.json)

          # Initialize test results file for Summarize test results step
          results_file="${GITHUB_WORKSPACE}/test_results.txt"
          : > "${results_file}"

          set +e
          any_test_failed=false
          for i in "${!mtl_test_list[@]}"; do
            test=${mtl_test_list[$i]}
            echo "Running test $((i + 1)) of ${#mtl_test_list[@]}"

            output=$(timeout --foreground ${TIMEOUT_PYTEST} python3.12 -m pytest -p no:labgrid --iterations=1 -sv --platform=mtl \
                --pnp-sim --pnp-sim-path=${GITHUB_WORKSPACE}/../intel/std_sim/ \
                --pnp-sim-params="config=${GITHUB_WORKSPACE}/../intel/std_sim/config.ini" \
                --rom=${GITHUB_WORKSPACE}/../intel/std_sim/dsp_rom_mtl_release.bin \
                --romext=${GITHUB_WORKSPACE}/../intel/std_sim/dsp_lib_rom_ext_mtl_release.bin  \
                --fw=${GITHUB_WORKSPACE}/../intel/std_sim/zephyr.ri \
                "$test" 2>&1)
            exit_code=$?

            if [ $exit_code -eq 0 ]; then
              echo "$test: PASSED" | tee -a "${results_file}"
            else
              echo "$test: FAILED" | tee -a "${results_file}"
              echo "Output from failed test $test:"
              # Print the first 200 lines of the output
              echo "$output" | head -n 200
              any_test_failed=true
            fi
          done

          # Exit with a non-zero status if any test failed
          if [ "$any_test_failed" = true ]; then
            exit 1
          fi

      - name: Summarize test results
        if: (success() || failure() || cancelled())
        shell: bash
        run: |
          results_file="${GITHUB_WORKSPACE}/test_results.txt"
          passed_count=$(grep -c 'PASSED' "${results_file}" || true)
          failed_count=$(grep -c 'FAILED' "${results_file}" || true)
          total_tests=$((passed_count + failed_count))

          echo "${passed_count} of ${total_tests} tests were passed."

          if [ "${failed_count}" -gt 0 ]; then
            echo "Failed tests:"
            grep 'FAILED' "${results_file}" | awk 'BEGIN {FS=": "}; { $NF=""; print $0}'
          else
            echo "No tests failed."
          fi

      - name: Upload FAT Test Results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test_results
          path: |
            /tmp/history/cAVS/*
          retention-days: 14

  publish-test-results:
    container:
      image: amr-registry.caas.intel.com/zephyrproject/ci-sdk:v0.26.13
      env:
        TOKEN: ${{ secrets.ZEPHYR_TOKEN }}
    env:
      ELASTICSEARCH_KEY: ${{ secrets.ELASTICSEARCH_KEY }}
      ELASTICSEARCH_SERVER: 'https://reports-fmos.hf.intel.com:9200'
    name: '[FAT] Publish Test Results'
    needs: [run_fat_testcases]
    runs-on: fmos-guest-ubuntu-24c
    continue-on-error: true
    if: success() || failure()
    steps:
      - name: Clean and Pre Environment
        run: |
          rm -rf artifacts
          pip3 install elasticsearch
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload to ElasticSearch Instance scheduled
        if: github.event_name == 'schedule'
        run: |
          run_date=`date --iso-8601=minutes`
          echo ${run_date}
          python3 ./scripts/ci/upload_test_results_fat.py -r ${run_date} \
          -i zephyr-tests-fat artifacts/**
